!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Acceptance	model.h	/^    double Acceptance;$/;"	m	class:model
Energy	model.h	/^    double Energy;$/;"	m	class:model
Interact	interactions.cpp	/^double Interact(particle &a, particle &b,double dr2, int Interaction_Type){$/;"	f
Interaction	model.h	/^    int Interaction;$/;"	m	class:model
Lennard_Jones	interactions.cpp	/^double Lennard_Jones(double rij2, double epsilon, double sigma, double cutoff){$/;"	f
MAXNEIGHBOURS	particle.h	/^#define MAXNEIGHBOURS /;"	d
Npart	model.h	/^    int Npart;$/;"	m	class:model
Repulsive_Lennard_Jones	interactions.cpp	/^double Repulsive_Lennard_Jones(double rij2, double epsilon, double sigma, double cutoff){$/;"	f
__COMMUNICATE_H	communicate.h	/^#define __COMMUNICATE_H$/;"	d
__INTERACTIONS_H	interactions.h	/^#define __INTERACTIONS_H$/;"	d
__PARTICLE_H	particle.h	/^#define __PARTICLE_H$/;"	d
__UTILITIES_H	utilities.h	/^#define __UTILITIES_H$/;"	d
__model_H	model.h	/^#define __model_H$/;"	d
add_random_particles	model.cpp	/^void model::add_random_particles(int N, int Type){$/;"	f	class:model
build_Verlet_lists	model.cpp	/^void model::build_Verlet_lists(double Verlet_radius){$/;"	f	class:model
cartesian	particle.h	/^    double cartesian[4];$/;"	m	class:particle
cut	interactions.h	/^#define cut /;"	d
distance	utilities.cpp	/^double distance(particle &a, particle &b, double R){$/;"	f
distance2	utilities.cpp	/^double distance2(particle &a, particle &b, double R){$/;"	f
engine	utilities.cpp	/^std::mt19937 engine;$/;"	v
eps	interactions.h	/^#define eps /;"	d
euclidean_distance2	utilities.cpp	/^double euclidean_distance2(particle &a, particle &b){$/;"	f
get_total_energy	model.cpp	/^double model::get_total_energy(){$/;"	f	class:model
local_energy	model.cpp	/^double model::local_energy(particle &P){$/;"	f	class:model
main	main.cpp	/^int main(int argc, char const *argv[])$/;"	f
mod2	utilities.cpp	/^double mod2(double x, double y, double z, double w){return (x*x)+(y*y)+(z*z)+(w*w);}$/;"	f
model	model.cpp	/^model::model(double Radius_value, int N){$/;"	f	class:model
model	model.h	/^class model$/;"	c
neighbours	particle.h	/^    int neighbours[MAXNEIGHBOURS];$/;"	m	class:particle
num_of_neighs	particle.h	/^    int num_of_neighs;$/;"	m	class:particle
particle	particle.cpp	/^particle::particle(){$/;"	f	class:particle
particle	particle.h	/^class particle$/;"	c
particles	model.h	/^    particle * particles;$/;"	m	class:model
perform_a_Metropolis_move	model.cpp	/^void model::perform_a_Metropolis_move(double Max_angular_perturbation, double Temperature){$/;"	f	class:model
polar	particle.h	/^    double polar[3];$/;"	m	class:particle
polar_coords_for_Verlet	model.h	/^    double * polar_coords_for_Verlet; \/\/3N$/;"	m	class:model
print_info	communicate.cpp	/^void print_info(const model &Sphere,int MCs, double stepsize){$/;"	f
radius	model.h	/^    double radius;$/;"	m	class:model
reassign_cartesian	particle.cpp	/^void particle::reassign_cartesian(double radius){$/;"	f	class:particle
rnd_int	utilities.cpp	/^double rnd_int(double a, double b){$/;"	f
rnd_real	utilities.cpp	/^double rnd_real(double a, double b){$/;"	f
save_info	communicate.cpp	/^void save_info(std::ofstream &file,const model &Sphere,int MCs, double stepsize){$/;"	f
set_cartesian	particle.cpp	/^void particle::set_cartesian(double* Values){$/;"	f	class:particle
set_interaction	model.cpp	/^void model::set_interaction(std::string Type){$/;"	f	class:model
set_polar	particle.cpp	/^void particle::set_polar(double* Values){$/;"	f	class:particle
sig	interactions.h	/^#define sig /;"	d
type	particle.h	/^    int type;$/;"	m	class:particle
write_polar_configuration	model.cpp	/^void model::write_polar_configuration(std::ofstream &Fout, int Iteration){$/;"	f	class:model
